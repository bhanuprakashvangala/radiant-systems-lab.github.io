- year: 2022
  project: "CHEX: Multiversion Replay with Ordered Checkpoints"
  project_image: "https://cdmdicewebprd01.dpu.depaul.edu/images/projects/CHEX.png"
  alt: "CHEX Logo"
  title: "CHEX: Multiversion Replay with Ordered Checkpoints."
  abstract: >
    In scientific computing and data science disciplines, it is often necessary to share application workflows and repeat results. Current tools containerize application workflows, and share the resulting container for repeating results. These tools, due to containerization, do improve sharing of results. However, they do not improve the efficiency of replay. The multiversion replay problem arises when multiple versions of an application are containerized, and each version must be replayed to repeat results. To avoid executing each version separately, CHEX, checkpoints program state and determines when it is permissible to reuse program state across versions. It does so using system call-based execution lineage. It optimizes replay using an in-memory cache, based on a checkpoint-restore-switch system.
  authors: >
    Manne, N. N. Satpati, S. Malik, T. Bagchi, A. Gehani, A. Chaudhary, A.
  publication: "Proceedings of the Very Large Databases (VLDB), 2022."
  link: "https://vldb.org/pvldb/vol15/p1297-malik.pdf"

- year: 2020
  project: "Provenance Difference and Alignment"
  project_image: "https://cdmdicewebprd01.dpu.depaul.edu/images/projects/ProvScope.png"
  alt: "provscope Logo"
  title: "Efficient provenance alignment in reproduced executions."
  abstract: >
    Reproducing experiments entails repeating experiments with changes. Changes, such as a change in input arguments, a change in the invoking environment, or a change due to nondeterminism in the runtime may alter results. If results alter significantly, perusing them is not sufficientâ€”users must analyze the impact of a change and determine if the experiment computed the same steps. Making fine-grained, stepwise comparisons can be both challenging and time-consuming. This project compares a reproduced execution with recorded system provenance of the original execution, and determine provenance alignment. The alignment is based on comparing the specific location in the program, the control flow of the execution, and data inputs.
  authors: >
    Nakamura, Y. Malik, T. Gehani, A.
  publication: "12th International Workshop on Theory and Practice of Provenance (TaPP 2020)"
  link: "https://www.usenix.org/system/files/tapp2020-paper-nakamura.pdf"
